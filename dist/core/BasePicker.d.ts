/// <reference types="node" />
import EventEmitter, { EventEmitterCallback } from './EventEmitter';
import { DateFormatterFn, PickerState, PickerLocale, Days, PickerDayRenderType, PickerMode, PickerEvents, PickerMonthState, MonthListObject, DaysStateTypes } from './types';
interface BasePickerOptions {
    locale: PickerLocale;
    date?: string;
    dateFormatter?: DateFormatterFn;
    weekOffset?: number;
    dayRenderType?: PickerDayRenderType;
    datePickerAutoRow?: boolean;
    datePickerMaxRow?: number;
    delayTimeout?: number;
    twoSide?: boolean;
}
declare abstract class BasePicker {
    protected _state: PickerState;
    protected _locale: PickerLocale;
    protected _events: EventEmitter;
    protected _selectedDate: string;
    protected _renderedDate: string;
    protected _days: Array<Days>;
    protected _monthOfsetIndex: Array<number>;
    protected _weekOffset: number;
    protected _dayRenderType: PickerDayRenderType;
    protected _datePickerMaxRow: number;
    protected _datePickerAutoRow: boolean;
    protected _delayTimeout: number;
    protected _twoSide: boolean;
    protected _normalized: boolean;
    protected _monthStep: number;
    protected _dateFormatter: (date: string) => string;
    protected _open: boolean;
    protected _mode: PickerMode;
    protected _isLoading: boolean;
    constructor(props: BasePickerOptions);
    get mode(): PickerMode;
    get isLoading(): boolean;
    get open(): boolean;
    onChageDate: (cb: EventEmitterCallback) => {
        unsubscribe: () => EventEmitterCallback[];
    };
    protected _tiggerUpdate: (eventName: PickerEvents) => void;
    private _calculateDaysListener;
    private _changeOpenListener;
    private _changeViewListener;
    private _changeStateListener;
    protected _forceLoadingStart: () => false | void;
    protected _forceLoadingEnd: () => false | NodeJS.Timeout;
    protected _getPastMonth: (month: number) => number;
    protected _get2PastMonth: (month: number) => number;
    protected _calculateRenderedDate: (date: string, isNormalized: boolean, twoSide: boolean, foramtter: DateFormatterFn, forceUseDate?: boolean) => string;
    protected _getSelectedDate: () => string;
    protected _getRenderedDate: () => string;
    protected _calculateMonthOfDate: <T>(date: string) => T;
    protected _nextMonthDate: () => string;
    protected _calculateDays: (date?: string, monthIndex?: number) => Array<Days>;
    protected _calculateAutoRowEndLength: (length: number) => number;
    protected _calculateAutoRowStartLength: (length: number) => number;
    protected _getLocale: (year: number) => import("./types").LocaleProps;
    protected _forceUpdate: (date?: string) => void;
    protected _getYear: () => number;
    protected _updateDate: (date: string) => void;
    getDaysArray: (monthSate?: PickerMonthState) => Days[];
    getMonthList: () => MonthListObject[];
    getYearsList: (minimumYear: number, maximumYear: number) => Array<number>;
    getDate: () => string;
    getSelecteDateUnformated: () => string;
    getRenderedDateUnformated: () => string;
    getRenderedMonth: () => number;
    getRenderedMonthName: () => string;
    getRenderedYear: () => number;
    getRenderedNextMonth: () => number;
    getRenderedNextMonthName: () => string;
    getRenderedNextDateYear: () => number;
    getDayMonthOffset: (index?: 0 | 1) => number;
    changeMonth: (month: number, forceClosing?: boolean) => void;
    changeYear: (year: number, forceClosing?: boolean) => void;
    handleShowNextMonth: () => void;
    handleShowPrevMonth: () => void;
    handleShowNextYear: () => void;
    handleShowPrevYear: () => void;
    goToToday: () => void;
    setOpen: (open: boolean) => void;
    setMode: (mode: PickerMode) => void;
    setDate: (date: string) => void;
    getMode: () => PickerMode;
    isOpen: () => boolean;
    isLoadingState: () => boolean;
    abstract changeDay(date: string, state: DaysStateTypes): void;
    abstract isSelectedDay(date: string): boolean;
}
export { BasePicker };
export type { PickerLocale as DatePickerLocale };
